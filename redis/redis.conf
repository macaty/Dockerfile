bind 0.0.0.0
protected-mode yes
port 6379
tcp-backlog 65535
timeout 0
tcp-keepalive 300
daemonize no
#后台启动
supervised no
#是否通过upstart或systemd管理守护进程。默认no没有服务监控，其它选项有upstart
loglevel notice
#logfile /var/log/redis/redis.log
databases 16
save ""
#关闭持久化存储
stop-writes-on-bgsave-error yes
#数据不重要可以关闭。
rdbcompression yes
rdbchecksum yes
#不开启压缩和校验
dbfilename dump.rdb
dir /tmp
# 存储db的地方
slave-serve-stale-data yes
#  当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：
# 1)  如果 slave-serve-stale-data 设置为 yes( 默认设置 ) ，从库会继续响应客户端的请求
# 2)  如果 slave-serve-stale-data 是指为 no ，出去 INFO 和 SLAVOF 命令之外的任何请求都会返回一个
#     错误 "SYNC with master in progress"
slave-read-only yes
repl-diskless-sync no
repl-diskless-sync-delay 5
repl-disable-tcp-nodelay no
repl-backlog-size 5M
#master slave架构复制挤压缓冲区大小，默认为1M，算法为second * write_size_per_second*2，second为从服务器断线后重新连上主服务器所需的平均时间，write_size_per_second 为每秒写入的数据量 参考redis设计与实现208页
slave-priority 100
#slave 优先级，当master下线时挑选值最小的为master
appendonly no
#是否开启aof
#  默认情况下， redis 会在后台异步的把数据库镜像备份到磁盘，但是该备份是非常耗时的，而且备份也不能很频繁，如果发生诸如拉闸限电、拔插头等状况，那么将造成比较大范围的数据丢失。
#  所以 redis 提供了另外一种更加高效的数据库备份及灾难恢复方式。
#  开启 append only 模式之后， redis 会把所接收到的每一次写操作请求都追加到 appendonly.aof 文件中，当 redis 重新启动时，会从该文件恢复出之前的状态。
#  但是这样会造成 appendonly.aof 文件过大，所以 redis 还支持了 BGREWRITEAOF 指令，对 appendonly.aof 进行重新整理。
#  你可以同时开启 asynchronous dumps 和  AOF

appendfilename "appendonly.aof"
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
lua-time-limit 5000
#最大执行lua脚本时间
slowlog-log-slower-than 10000
#是否启用慢查询？
slowlog-max-len 128
latency-monitor-threshold 0
#延时监控，默认为不需要
notify-keyspace-events ""
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000
activerehashing yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
#这里解释下output-buffer-limites这个参数是什么。所有的client请求redis数据的时候，redis要返回给client的数据都会先被存储在output-buffer中，等所有信息都被传送完毕之后，再清除output-buffer中的数据。redis为了保护做了限制，这个配置可以查看redis的配置文件
#client-output-buffer-limit slave 256mb 64mb 60
#这里对是客服端是slave的做限制
#256mb 是一个硬性限制，当output-buffer的大小大于256mb之后就会断开连接
#64mb 60 是一个软限制，当output-buffer的大小大于64mb并且超过了60秒的时候就会断开连接
hz 50
#提高该值将在 Redis 空闲时使用更多的 CPU 时，但同时当有多个 key 同时到期会使 Redis 的反应更灵敏，以及超时可以更精确地处理。
#但官方不建议设置超过一百的值
aof-rewrite-incremental-fsync yes
